var PDFDocument = require('pdfkit');
var fs = require('fs');

// Create a new PDFDocument
var doc = new PDFDocument({
  pdfVersion: '1.5',
  lang: 'en-US',
  tagged: true,
  displayTitle: true,
  autoFirstPage: false,
  bufferPages: true,
});

doc.pipe(fs.createWriteStream('output.pdf'));

// Set some meta data
doc.info['Title'] = 'Test Document';
doc.info['Author'] = 'Devon Govett';

// Initialise document logical structure
var struct = doc.struct('Document');
doc.addStructure(struct);

// Register a font name for use later
doc.registerFont('BitterBold', 'fonts/Bitter-Bold.ttf');
doc.registerFont('Sans', 'fonts/sourcesanspro-regular-webfont.ttf');
doc.registerFont('SansBold', 'fonts/sourcesanspro-bold-webfont.ttf');

doc.addPage({
  margin: 50,
});

struct.add(
  doc.struct('H1', () => {
    doc
      .font('BitterBold')
      .fontSize(20)
      .text('Lab and test results: Complete blood count on April 18, 2023', {
        paragraphGap: 10,
      });
  })
);

var message =
  "If your results are outside the standard range, this doesn't automatically mean you have a health problem. Your provider will explain what your results mean for your health. If you have questions about your results, contact your VA care team.";
struct.add(
  doc.struct('P', () => {
    doc.font('Sans').fontSize(12).text(message, { paragraphGap: 10 });
  })
);

struct.add(
  doc.struct('H2', () => {
    doc
      .font('BitterBold')
      .fontSize(16)
      .text('Details about this test', { paragraphGap: 10 });
  })
);

const detailsList = doc.struct('L');
struct.add(detailsList);

const detailsListItem = doc.struct('LI');
struct.add(detailsListItem);

detailsListItem.add(
  doc.struct('Lbl', () => {
    doc.font('SansBold', 12).text('Provider notes', { indent: 10 });
  })
);

detailsListItem.add(
  doc.struct('LBody', () => {
    doc.font('Sans', 12).text('None noted', { indent: 10 });
  })
);

const details = [
  { label: 'Type of test', data: 'Chemistry and hematology' },
  { label: 'Sample tested', data: 'Serum' },
  { label: 'Ordered by', data: 'Beth M. Smith' },
  {
    label: 'Ordering location',
    data: 'DAYTON, OH VAMC 4100 W. THIRD STREE, DAYTON, OH 45428',
  },
  {
    label: 'Collecting location',
    data: 'DAYTON, OH VAMC 4100 W. THIRD STREE, DAYTON, OH 45428',
  },
];

details.forEach((item) => {
  struct.add(
    doc.struct('LI', () => {
      doc
        .font('SansBold', 12)
        .lineGap(5)
        .text(`${item.label}: `, { continued: true, indent: 10 })
        .font('Sans', 12)
        .text(item.data, { indent: 50 });
    })
  );
});

detailsList.end();

//Global Edits to All Pages (Header/Footer, etc)
let pages = doc.bufferedPageRange();
for (let i = 0; i < pages.count; i++) {
  doc.switchToPage(i);

  //Header: Add page number
  let oldTopMargin = doc.page.margins.top;
  doc.page.margins.top = 0; //Dumb: Have to remove top margin in order to write into it
  doc.text(
    'Roberts, Jesse',
    50,
    oldTopMargin - 30, // Centered vertically in top margin
    { align: 'left' }
  );
  doc.text(
    `Page: ${i + 1} of ${pages.count}`,
    0,
    oldTopMargin - 30, // Centered vertically in top margin
    { align: 'right' }
  );
  doc.page.margins.top = oldTopMargin; // ReProtect top margin

  //Footer: Add page number
  let oldBottomMargin = doc.page.margins.bottom;
  doc.page.margins.bottom = 0; //Dumb: Have to remove bottom margin in order to write into it
  doc.text(
    'Report generated by My HealtheVet and VA on May 1, 2023',
    50,
    doc.page.height - oldBottomMargin / 2, // Centered vertically in bottom margin
    { align: 'left' }
  );
  doc.text(
    `Page: ${i + 1} of ${pages.count}`,
    50,
    doc.page.height - oldBottomMargin / 2, // Centered vertically in bottom margin
    { align: 'right' }
  );
  doc.page.margins.bottom = oldBottomMargin; // ReProtect bottom margin
}

doc.end();
